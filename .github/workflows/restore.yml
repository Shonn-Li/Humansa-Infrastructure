name: Restore Infrastructure

on:
  push:
    tags:
      - "restore-*"
  workflow_dispatch:
    inputs:
      snapshot_id:
        description: 'Database snapshot ID to restore from (leave empty for fresh database)'
        required: false
        type: string
      use_cost_optimized:
        description: 'Use cost-optimized configuration?'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
        default: 'yes'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
  TF_VAR_route53_zone_id: ${{ secrets.ROUTE53_ZONE_ID }}
  TF_VAR_github_pat: ${{ secrets.GHCR_PAT }}
  TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

jobs:
  restore:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: List available snapshots
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.snapshot_id == ''
        run: |
          echo "📋 Available database snapshots:"
          aws rds describe-db-snapshots \
            --query "DBSnapshots[?contains(DBSnapshotIdentifier, 'humansa')].{ID:DBSnapshotIdentifier,Created:SnapshotCreateTime,Size:AllocatedStorage}" \
            --output table

      - name: Terraform Init
        working-directory: environments/production
        run: |
          terraform init \
            -backend-config="bucket=humansa-terraform-state" \
            -backend-config="key=state/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Check current state
        working-directory: environments/production
        run: |
          echo "🔍 Checking current infrastructure state..."
          terraform state list || echo "No existing state found"

      - name: Terraform Plan
        id: plan
        working-directory: environments/production
        run: |
          # Determine which configuration to use
          if [[ "${{ github.event.inputs.use_cost_optimized }}" == "yes" ]] || [[ "${{ github.ref }}" == *"cost-optimization"* ]]; then
            echo "📊 Using cost-optimized configuration"
            terraform plan -var-file="ultra-cost-optimized.tfvars" -out=restore.tfplan
          else
            echo "📊 Using standard configuration"
            terraform plan -out=restore.tfplan
          fi

      - name: Show restoration plan
        working-directory: environments/production
        run: |
          echo "🔨 Resources to be created/restored:"
          terraform show -no-color restore.tfplan | head -100

      - name: Terraform Apply
        working-directory: environments/production
        run: |
          echo "🚀 Restoring infrastructure..."
          terraform apply -auto-approve restore.tfplan

      - name: Restore database from snapshot
        if: github.event.inputs.snapshot_id != ''
        run: |
          SNAPSHOT_ID="${{ github.event.inputs.snapshot_id }}"
          echo "🔄 Restoring database from snapshot: $SNAPSHOT_ID"
          
          # Get the new RDS instance identifier from terraform
          DB_INSTANCE=$(aws rds describe-db-instances \
            --query "DBInstances[?contains(DBInstanceIdentifier, 'humansa')].DBInstanceIdentifier" \
            --output text)
          
          if [ -n "$DB_INSTANCE" ]; then
            echo "⚠️ Existing database found. To restore from snapshot:"
            echo "1. Delete current instance: $DB_INSTANCE"
            echo "2. Restore from snapshot: $SNAPSHOT_ID"
            echo "3. Update terraform state"
            
            # For safety, we don't automatically replace the database
            echo "Manual intervention required for database restoration"
          else
            # If no database exists, restore from snapshot
            aws rds restore-db-instance-from-db-snapshot \
              --db-instance-identifier "humansa-postgres" \
              --db-snapshot-identifier "$SNAPSHOT_ID" \
              --db-instance-class "db.t3.micro" \
              --publicly-accessible \
              --no-multi-az
            
            echo "⏳ Waiting for database restoration..."
            aws rds wait db-instance-available \
              --db-instance-identifier "humansa-postgres"
            
            echo "✅ Database restored from snapshot"
          fi

      - name: Update SSM parameters
        run: |
          echo "📝 Updating SSM parameters..."
          
          # Get new infrastructure details
          DB_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier humansa-postgres \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text 2>/dev/null || echo "pending")
          
          TG_ARN=$(aws elbv2 describe-target-groups \
            --names humansa-production-ml-tg \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text 2>/dev/null || echo "pending")
          
          # Update parameters
          aws ssm put-parameter \
            --name "/humansa/production/db_host" \
            --value "$DB_ENDPOINT" \
            --type "String" \
            --overwrite || true
          
          aws ssm put-parameter \
            --name "/humansa/production/ml_tg_arn" \
            --value "$TG_ARN" \
            --type "String" \
            --overwrite || true

      - name: Verify restoration
        run: |
          echo "✅ Restoration Summary:"
          echo ""
          
          # Check EC2 instances
          INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:Project,Values=humansa" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].[InstanceId,State.Name,PublicIpAddress]" \
            --output table)
          echo "EC2 Instances:"
          echo "$INSTANCES"
          
          # Check load balancer
          ALB=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'humansa')].[LoadBalancerName,State.Code,DNSName]" \
            --output table)
          echo ""
          echo "Load Balancer:"
          echo "$ALB"
          
          # Check RDS
          RDS=$(aws rds describe-db-instances \
            --query "DBInstances[?contains(DBInstanceIdentifier, 'humansa')].[DBInstanceIdentifier,DBInstanceStatus,Endpoint.Address]" \
            --output table)
          echo ""
          echo "RDS Database:"
          echo "$RDS"

      - name: Output next steps
        run: |
          cat << EOF
          
          ========================================
          🎉 Infrastructure Restoration Complete!
          ========================================
          
          Next Steps:
          -----------
          1. Deploy ML Server:
             git tag release-1.0.0
             git push origin release-1.0.0
          
          2. Test endpoints:
             curl https://humansa.youwo.ai/health
          
          3. Verify all services:
             ./scripts/test_humansa_endpoints.py
          
          Notes:
          ------
          - Infrastructure is ready but ML server needs deployment
          - Database is ${DB_STATUS}
          - All SSM parameters have been updated
          - Security groups and networking are configured
          
          Access URL: https://humansa.youwo.ai
          ========================================
          EOF